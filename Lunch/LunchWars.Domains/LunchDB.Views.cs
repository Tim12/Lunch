//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(LunchWars.Domain.LunchWarsEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsd09205c95bba8329720301a1b7c3b0b52a3a63db84889ee176fb025747ef5767))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsd09205c95bba8329720301a1b7c3b0b52a3a63db84889ee176fb025747ef5767 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "d09205c95bba8329720301a1b7c3b0b52a3a63db84889ee176fb025747ef5767"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "LunchWarsModelStoreContainer.Categories")
            {
                return GetView0();
            }

            if (extentName == "LunchWarsModelStoreContainer.LookupLength")
            {
                return GetView1();
            }

            if (extentName == "LunchWarsModelStoreContainer.RestaurantCategories")
            {
                return GetView2();
            }

            if (extentName == "LunchWarsModelStoreContainer.Restaurants")
            {
                return GetView3();
            }

            if (extentName == "LunchWarsModelStoreContainer.Trip")
            {
                return GetView4();
            }

            if (extentName == "LunchWarsModelStoreContainer.TripUsers")
            {
                return GetView5();
            }

            if (extentName == "LunchWarsModelStoreContainer.TripVotes")
            {
                return GetView6();
            }

            if (extentName == "LunchWarsModelStoreContainer.Users")
            {
                return GetView7();
            }

            if (extentName == "LunchWarsModelStoreContainer.VoteType")
            {
                return GetView8();
            }

            if (extentName == "LunchWarsEntities.Categories")
            {
                return GetView9();
            }

            if (extentName == "LunchWarsEntities.LookupLengths")
            {
                return GetView10();
            }

            if (extentName == "LunchWarsEntities.RestaurantCategories")
            {
                return GetView11();
            }

            if (extentName == "LunchWarsEntities.Restaurants")
            {
                return GetView12();
            }

            if (extentName == "LunchWarsEntities.Trips")
            {
                return GetView13();
            }

            if (extentName == "LunchWarsEntities.TripUsers")
            {
                return GetView14();
            }

            if (extentName == "LunchWarsEntities.TripVotes")
            {
                return GetView15();
            }

            if (extentName == "LunchWarsEntities.Users")
            {
                return GetView16();
            }

            if (extentName == "LunchWarsEntities.VoteTypes")
            {
                return GetView17();
            }

            if (extentName == "LunchWarsModelStoreContainer.sysdiagrams")
            {
                return GetView18();
            }

            if (extentName == "LunchWarsEntities.sysdiagrams")
            {
                return GetView19();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [LunchWarsModel.Store.Categories](T1.Categories_Id, T1.Categories_Name)
    FROM (
        SELECT 
            T.Id AS Categories_Id, 
            T.Name AS Categories_Name, 
            True AS _from0
        FROM LunchWarsEntities.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.LookupLength.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LookupLength
        [LunchWarsModel.Store.LookupLength](T1.LookupLength_Id, T1.LookupLength_Length)
    FROM (
        SELECT 
            T.Id AS LookupLength_Id, 
            T.Length AS LookupLength_Length, 
            True AS _from0
        FROM LunchWarsEntities.LookupLengths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.RestaurantCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RestaurantCategories
        [LunchWarsModel.Store.RestaurantCategories](T1.RestaurantCategories_Id, T1.RestaurantCategories_RestaurantId, T1.RestaurantCategories_CategoryId)
    FROM (
        SELECT 
            T.Id AS RestaurantCategories_Id, 
            T.RestaurantId AS RestaurantCategories_RestaurantId, 
            T.CategoryId AS RestaurantCategories_CategoryId, 
            True AS _from0
        FROM LunchWarsEntities.RestaurantCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.Restaurants.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Restaurants
        [LunchWarsModel.Store.Restaurants](T1.Restaurants_Id, T1.Restaurants_YelpId, T1.Restaurants_Name, T1.Restaurants_Address, T1.Restaurants_City, T1.Restaurants_State, T1.Restaurants_Zip, T1.Restaurants_Price)
    FROM (
        SELECT 
            T.Id AS Restaurants_Id, 
            T.YelpId AS Restaurants_YelpId, 
            T.Name AS Restaurants_Name, 
            T.Address AS Restaurants_Address, 
            T.City AS Restaurants_City, 
            T.State AS Restaurants_State, 
            T.Zip AS Restaurants_Zip, 
            T.Price AS Restaurants_Price, 
            True AS _from0
        FROM LunchWarsEntities.Restaurants AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.Trip.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Trip
        [LunchWarsModel.Store.Trip](T1.Trip_Id, T1.Trip_Name, T1.Trip_Date, T1.Trip_Length)
    FROM (
        SELECT 
            T.Id AS Trip_Id, 
            T.Name AS Trip_Name, 
            T.Date AS Trip_Date, 
            T.Length AS Trip_Length, 
            True AS _from0
        FROM LunchWarsEntities.Trips AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.TripUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TripUsers
        [LunchWarsModel.Store.TripUsers](T1.TripUsers_TripId, T1.TripUsers_UserId, T1.TripUsers_Attended, T1.TripUsers_IsDriving, T1.TripUsers_Votes)
    FROM (
        SELECT 
            T.TripId AS TripUsers_TripId, 
            T.UserId AS TripUsers_UserId, 
            T.Attended AS TripUsers_Attended, 
            T.IsDriving AS TripUsers_IsDriving, 
            T.Votes AS TripUsers_Votes, 
            True AS _from0
        FROM LunchWarsEntities.TripUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.TripVotes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TripVotes
        [LunchWarsModel.Store.TripVotes](T1.TripVotes_TripId, T1.TripVotes_RestaurantId, T1.TripVotes_UserId, T1.TripVotes_VoteTypeId)
    FROM (
        SELECT 
            T.TripId AS TripVotes_TripId, 
            T.RestaurantId AS TripVotes_RestaurantId, 
            T.UserId AS TripVotes_UserId, 
            T.VoteTypeId AS TripVotes_VoteTypeId, 
            True AS _from0
        FROM LunchWarsEntities.TripVotes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [LunchWarsModel.Store.Users](T1.Users_Id, T1.Users_Email, T1.Users_Name)
    FROM (
        SELECT 
            T.Id AS Users_Id, 
            T.Email AS Users_Email, 
            T.Name AS Users_Name, 
            True AS _from0
        FROM LunchWarsEntities.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.VoteType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VoteType
        [LunchWarsModel.Store.VoteType](T1.VoteType_Id, T1.VoteType_Name)
    FROM (
        SELECT 
            T.Id AS VoteType_Id, 
            T.Name AS VoteType_Name, 
            True AS _from0
        FROM LunchWarsEntities.VoteTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [LunchWarsModel.Category](T1.Category_Id, T1.Category_Name)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.Name AS Category_Name, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.LookupLengths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LookupLengths
        [LunchWarsModel.LookupLength](T1.LookupLength_Id, T1.LookupLength_Length)
    FROM (
        SELECT 
            T.Id AS LookupLength_Id, 
            T.Length AS LookupLength_Length, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.LookupLength AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.RestaurantCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RestaurantCategories
        [LunchWarsModel.RestaurantCategory](T1.RestaurantCategory_Id, T1.RestaurantCategory_RestaurantId, T1.RestaurantCategory_CategoryId)
    FROM (
        SELECT 
            T.Id AS RestaurantCategory_Id, 
            T.RestaurantId AS RestaurantCategory_RestaurantId, 
            T.CategoryId AS RestaurantCategory_CategoryId, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.RestaurantCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.Restaurants.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Restaurants
        [LunchWarsModel.Restaurant](T1.Restaurant_Id, T1.Restaurant_YelpId, T1.Restaurant_Name, T1.Restaurant_Address, T1.Restaurant_City, T1.Restaurant_State, T1.Restaurant_Zip, T1.Restaurant_Price)
    FROM (
        SELECT 
            T.Id AS Restaurant_Id, 
            T.YelpId AS Restaurant_YelpId, 
            T.Name AS Restaurant_Name, 
            T.Address AS Restaurant_Address, 
            T.City AS Restaurant_City, 
            T.State AS Restaurant_State, 
            T.Zip AS Restaurant_Zip, 
            T.Price AS Restaurant_Price, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.Restaurants AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.Trips.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Trips
        [LunchWarsModel.Trip](T1.Trip_Id, T1.Trip_Name, T1.Trip_Date, T1.Trip_Length)
    FROM (
        SELECT 
            T.Id AS Trip_Id, 
            T.Name AS Trip_Name, 
            T.Date AS Trip_Date, 
            T.Length AS Trip_Length, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.Trip AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.TripUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TripUsers
        [LunchWarsModel.TripUser](T1.TripUser_TripId, T1.TripUser_UserId, T1.TripUser_Attended, T1.TripUser_IsDriving, T1.TripUser_Votes)
    FROM (
        SELECT 
            T.TripId AS TripUser_TripId, 
            T.UserId AS TripUser_UserId, 
            T.Attended AS TripUser_Attended, 
            T.IsDriving AS TripUser_IsDriving, 
            T.Votes AS TripUser_Votes, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.TripUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.TripVotes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TripVotes
        [LunchWarsModel.TripVote](T1.TripVote_TripId, T1.TripVote_RestaurantId, T1.TripVote_UserId, T1.TripVote_VoteTypeId)
    FROM (
        SELECT 
            T.TripId AS TripVote_TripId, 
            T.RestaurantId AS TripVote_RestaurantId, 
            T.UserId AS TripVote_UserId, 
            T.VoteTypeId AS TripVote_VoteTypeId, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.TripVotes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [LunchWarsModel.User](T1.User_Id, T1.User_Email, T1.User_Name)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Email AS User_Email, 
            T.Name AS User_Name, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.VoteTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VoteTypes
        [LunchWarsModel.VoteType](T1.VoteType_Id, T1.VoteType_Name)
    FROM (
        SELECT 
            T.Id AS VoteType_Id, 
            T.Name AS VoteType_Name, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.VoteType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsModelStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [LunchWarsModel.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM LunchWarsEntities.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LunchWarsEntities.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [LunchWarsModel.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM LunchWarsModelStoreContainer.sysdiagrams AS T
    ) AS T1");
        }
    }
}
